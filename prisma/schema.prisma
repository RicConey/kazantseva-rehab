generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Location {
  id           Int           @id @default(autoincrement())
  name         String        // Название кабинета, например "Главный офис"
  address      String        // Адрес или описание (этаж, корпус и т.п.)
  color        String?       // Опционально: цвет для визуализации в UI
  position     Int           @default(0) // Опционально: порядок в списке
  appointments Appointment[] // Связь на приёмы
}

model prices {
  id       Int    @id @default(autoincrement())
  service  String
  duration Json
  price    Json
  position Int    @default(0)
}

model Appointment {
  id         Int      @id @default(autoincrement())
  client     String?
  clientId    String?   // опциональный FK на Client.id
  clientRel   Client?   @relation(fields: [clientId], references: [id])
  startTime  DateTime
  duration   Int      // длительность в минутах
  notes      String?  // необязательные заметки
  createdAt  DateTime @default(now())
  price      Int

  @@map("appointments")
  locationId  Int
  location    Location  @relation(fields: [locationId], references: [id])
}

model qr_links {
  id              Int       @id @default(autoincrement())
  slug            String    @unique
  destination_url String
  display_name    String?
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  owner_id        Int?
  users           users?    @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
}

model qr_logs {
  id              Int       @id @default(autoincrement())
  qr_slug         String
  click_timestamp DateTime? @default(now()) @db.Timestamptz(6)
  ip              String?
  user_agent      String?
  country_code    String?
}

model users {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  password_hash String
  role          String     @default("user")
  created_at    DateTime?  @default(now()) @db.Timestamptz(6)
  qr_links      qr_links[]
}

model FinanceReport {
  id           Int      @id @default(autoincrement())
  periodType   String   @map("period_type")
  periodStart  DateTime @map("period_start")
  periodEnd    DateTime @map("period_end")
  total        Decimal  @db.Decimal(15, 2)
  createdAt    DateTime @default(now()) @map("created_at")

  @@unique([periodType, periodStart, periodEnd], name: "period_type_period_start_period_end")
  @@map("finance_reports")
}

model CronFlag {
  id       Int      @id @default(autoincrement())
  cronName String   @unique @map("cron_name")
  lastRun  DateTime @map("last_run")

  @@map("cron_flags")
}

model Note {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id        String   @id @default(uuid())
  phone     String   @unique
  name      String
  birthDate DateTime
  notes     String?
  messengerTypes String[]      @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
}